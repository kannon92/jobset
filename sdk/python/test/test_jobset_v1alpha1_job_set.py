# coding: utf-8

"""
    JobSet SDK

    Python SDK for the JobSet API  # noqa: E501

    The version of the OpenAPI document: v0.1.4
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

# Kubernetes imports
from kubernetes.client.models.v1_job_template_spec import V1JobTemplateSpec
import unittest
import datetime

import jobset
from jobset.models.jobset_v1alpha1_job_set import JobsetV1alpha1JobSet  # noqa: E501
from jobset.rest import ApiException

class TestJobsetV1alpha1JobSet(unittest.TestCase):
    """JobsetV1alpha1JobSet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test JobsetV1alpha1JobSet
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = jobset.models.jobset_v1alpha1_job_set.JobsetV1alpha1JobSet()  # noqa: E501
        if include_optional :
            return JobsetV1alpha1JobSet(
                api_version = '0', 
                kind = '0', 
                metadata = None, 
                spec = jobset.models.jobset_v1alpha1_job_set_spec.JobsetV1alpha1JobSetSpec(
                    failure_policy = jobset.models.jobset_v1alpha1_failure_policy.JobsetV1alpha1FailurePolicy(
                        max_restarts = 56, ), 
                    managed_by = '0', 
                    network = jobset.models.jobset_v1alpha1_network.JobsetV1alpha1Network(
                        enable_dns_hostnames = True, 
                        subdomain = '0', ), 
                    replicated_jobs = [
                        jobset.models.jobset_v1alpha1_replicated_job.JobsetV1alpha1ReplicatedJob(
                            name = '0', 
                            replicas = 56, 
                            template = V1JobTemplateSpec(), )
                        ], 
                    startup_policy = jobset.models.jobset_v1alpha1_startup_policy.JobsetV1alpha1StartupPolicy(
                        startup_policy_order = '0', ), 
                    success_policy = jobset.models.jobset_v1alpha1_success_policy.JobsetV1alpha1SuccessPolicy(
                        operator = '0', 
                        target_replicated_jobs = [
                            '0'
                            ], ), 
                    suspend = True, ), 
                status = jobset.models.jobset_v1alpha1_job_set_status.JobsetV1alpha1JobSetStatus(
                    conditions = [
                        None
                        ], 
                    replicated_jobs_status = [
                        jobset.models.jobset_v1alpha1_replicated_job_status.JobsetV1alpha1ReplicatedJobStatus(
                            active = 56, 
                            failed = 56, 
                            name = '0', 
                            ready = 56, 
                            succeeded = 56, 
                            suspended = 56, )
                        ], 
                    restarts = 56, )
            )
        else :
            return JobsetV1alpha1JobSet(
        )

    def testJobsetV1alpha1JobSet(self):
        """Test JobsetV1alpha1JobSet"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
